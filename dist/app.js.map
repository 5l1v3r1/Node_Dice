{"version":3,"sources":["../src/app.js"],"names":["app","MongoStore","exphbs","helpers","block","name","blocks","_blocks","content","join","contentFor","options","push","fn","extname","defaultLayout","layoutsDir","serverRoot","partialsDir","sessionStore","mongoStore","use","cookieSecret","resave","saveUninitialized","secret","store","cookie","maxAge","session","timeout","server","createServer","io","key","parser","disable","engine","set","process","env","NODE_ENV","static","clientRoot","threshold","json","urlencoded","extended","require","listen","port","console","log"],"mappings":"AAAA;;;;;;AAMA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAbA;AAcAA,MAAM,wBAAN;AAVA;;AAWC,IAAMC,aAAa,qDAAnB;AACD;AACA,IAAMC,SAAS,iCAAmB;AAC9BC,aAAS;AACLC,eAAO,eAAUC,IAAV,EAAgB;AACnB,gBAAIC,SAAS,KAAKC,OAAlB;AAAA,gBACIC,UAAUF,UAAUA,OAAOD,IAAP,CADxB;;AAGA,mBAAOG,UAAUA,QAAQC,IAAR,CAAa,IAAb,CAAV,GAA+B,IAAtC;AACH,SANI;AAOLC,oBAAY,oBAAUL,IAAV,EAAgBM,OAAhB,EAAyB;AACjC,gBAAIL,SAAS,KAAKC,OAAL,KAAiB,KAAKA,OAAL,GAAe,EAAhC,CAAb;AAAA,gBACIH,QAAQE,OAAOD,IAAP,MAAiBC,OAAOD,IAAP,IAAe,EAAhC,CADZ;;AAGAD,kBAAMQ,IAAN,CAAWD,QAAQE,EAAR,CAAW,IAAX,CAAX;AACH;AAZI,KADqB;AAe9BC,aAAS,MAfqB;AAgB9BC,mBAAe,SAhBe;AAiB9BC,gBAAc,iBAAOC,UAAP,GAAoB,iBAjBJ;AAkB9BC,iBAAc,iBAAOD,UAAP,GAAoB;AAlBJ,CAAnB,CAAf;;AAqBA;AACA;AACA;;AAEA;AACA,IAAME,eAAe,IAAIlB,UAAJ,CAAe,iBAAOmB,UAAtB,CAArB;AACApB,IAAIqB,GAAJ,CAAQ,4BAAa,iBAAOC,YAApB,CAAR;AACAtB,IAAIqB,GAAJ,CAAQ,8BAAQ;AACZE,YAAQ,IADI;AAEZC,uBAAmB,IAFP;AAGZC,YAAQ,iBAAOH,YAHH;AAIZI,WAAOP,YAJK;AAKZQ,YAAQ;AACNC,gBAAQ,iBAAOC,OAAP,CAAeC,OADjB,CACyB;AADzB;AALI,CAAR,CAAR;;AAUA;AACA,IAAMC,SAAS,eAAKC,YAAL,CAAkBhC,GAAlB,CAAf;AACA,IAAMiC,KAAI,sBAASF,MAAT,CAAV;AACA;AACAE,GAAGZ,GAAH,CAAO,sBAAgB;AACnBK,WAAOP,YADY;AAEnBe,SAAK,aAFc;AAGnBT,YAAQ,iBAAOH,YAHI;AAInBa,YAAQ;AAJW,CAAhB,CAAP;;AAOA;AACAnC,IAAIoC,OAAJ,CAAY,cAAZ;;AAEApC,IAAIqC,MAAJ,CAAW,MAAX,EAAmBnC,MAAnB;AACAF,IAAIsC,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAtC,IAAIsC,GAAJ,CAAQ,OAAR,EAAiB,iBAAOrB,UAAP,GAAoB,QAArC;;AAEA;AACA;AACA;AACA,IAAIsB,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA5B,EAA2C;AACvCzC,QAAIqB,GAAJ,CAAQ,kBAAQqB,MAAR,CAAe,iBAAOC,UAAtB,CAAR;AACA3C,QAAIqB,GAAJ,CAAQ,2BAAY,EAAEuB,WAAW,GAAb,EAAZ,CAAR;AACH;AACD5C,IAAIqB,GAAJ,CAAQ,qBAAWwB,IAAX,EAAR;AACA7C,IAAIqB,GAAJ,CAAQ,qBAAWyB,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACA/C,IAAIqB,GAAJ,CAAQ,gCAAiB,EAAjB,CAAR;;AAEA;AACA2B,QAAQ,cAAR,EAAwBhD,GAAxB,EAA6BE,MAA7B;AACA;AACA8C,QAAQ,eAAR,EAAyBf,EAAzB;;AAEAF,OAAOkB,MAAP,CAAc,iBAAOC,IAArB,EAA2B,YAAY;AACnCC,YAAQC,GAAR,CAAY,4BAA4B,iBAAOF,IAA/C;AACH,CAFD","file":"app.js","sourcesContent":["/**\r\n * Copyright 2014 Node Dice\r\n *\r\n * Created by Neo on 2015/02/08\r\n */\r\n\r\n'use strict';\r\nimport    newrelic from 'newrelic';\r\n//import cluster from 'cluster');\r\nimport    config from './config';\r\nimport    express from 'express';\r\nimport    expressValidator from 'express-validator';\r\n//favicon from 'serve-favicon'),\r\nimport    compression from 'compression';\r\nimport    bodyParser from 'body-parser';\r\nimport    cookieParser from 'cookie-parser';\r\nimport    session from 'express-session';\r\nimport    MongoConnect from 'connect-mongo';\r\nimport    socketHandshake from 'socket.io-handshake';\r\nimport    express_handlebars from 'express-handlebars';\r\nimport    http from 'http';\r\nimport    socketio from 'socket.io';\r\napp = express();\r\n const MongoStore = MongoConnect(session);\r\n/*set up view engine*/\r\nconst exphbs = express_handlebars({\r\n    helpers: {\r\n        block: function (name) {\r\n            var blocks = this._blocks,\r\n                content = blocks && blocks[name];\r\n            \r\n            return content ? content.join('\\n') : null;\r\n        },\r\n        contentFor: function (name, options) {\r\n            var blocks = this._blocks || (this._blocks = {}),\r\n                block = blocks[name] || (blocks[name] = []);\r\n            \r\n            block.push(options.fn(this));\r\n        }\r\n    },\r\n    extname: '.hbs', \r\n    defaultLayout: '_Layout',\r\n    layoutsDir  : config.serverRoot + '/views/layouts/',\r\n    partialsDir : config.serverRoot + '/views/partials/'\r\n});\r\n\r\n//if (process.env.SITE_USER) {\r\n//    app.use(express.basicAuth(process.env.SITE_USER, process.env.SITE_PASS));\r\n//}\r\n\r\n/*set up session for express*/\r\nconst sessionStore = new MongoStore(config.mongoStore);\r\napp.use(cookieParser(config.cookieSecret));\r\napp.use(session({\r\n    resave: true,\r\n    saveUninitialized: true,\r\n    secret: config.cookieSecret,\r\n    store: sessionStore,\r\n    cookie: {\r\n      maxAge: config.session.timeout //session will expire in 30 days\r\n    }\r\n}));\r\n\r\n/*require socket.io*/\r\nconst server = http.createServer(app);\r\nconst io =socketio(server);\r\n/*Adding session to socket*/\r\nio.use(socketHandshake({\r\n    store: sessionStore, \r\n    key: 'connect.sid', \r\n    secret: config.cookieSecret, \r\n    parser: cookieParser()\r\n}));\r\n\r\n//config express in all environments\r\napp.disable('x-powered-by');\r\n\r\napp.engine('.hbs', exphbs);\r\napp.set('view engine', '.hbs');\r\napp.set('views', config.serverRoot + '/views');\r\n\r\n//Add express's middlewares\r\n//app.use(favicon(config.clientRoot + '/favicon.ico'));\r\n//Only used in development. In production, use nginx to serve static files\r\nif (process.env.NODE_ENV == 'development') {\r\n    app.use(express.static(config.clientRoot));\r\n    app.use(compression({ threshold: 512 }));\r\n}\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(expressValidator([]));\r\n\r\n//map routes for pages\r\nrequire('./app/routes')(app, exphbs);\r\n//socket communication for games\r\nrequire('./app/sockets')(io);\r\n\r\nserver.listen(config.port, function () {\r\n    console.log('Server running on port ' + config.port);\r\n});\r\n\r\n\r\n"]}
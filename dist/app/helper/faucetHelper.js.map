{"version":3,"sources":["../../../src/app/helper/faucetHelper.js"],"names":["dbhelp","require","db","config","userHelper","mongoose","faucetSchema","Schema","lastTime","Date","userid","String","statics","GetPay","callback","GetUserById","err","u","faucetModel","findOne","fa","now","faucet","interval","save","amount","randomIntInc","min","max","f","addProfit","code","balance","getBalance","low","high","Math","floor","random","model","module","exports"],"mappings":";;AAAC,IAAIA,SAASC,QAAQ,YAAR,CAAb;AAAA,IACGC,KAAKF,OAAOE,EADf;AAAA,IAEGC,SAASF,QAAQ,cAAR,CAFZ;AAAA,IAGGG,aAAaH,QAAQ,iBAAR,CAHhB;AAAA,IAIGI,WAAWL,OAAOK,QAJrB;;AAMD,IAAIC,eAAe,IAAID,SAASE,MAAb,CAAoB;AACnCC,cAAUC,IADyB;AAEnCC,YAAQC;AAF2B,CAApB,CAAnB;AAIA;AACAL,aAAaM,OAAb,GAAuB;AACnBC,YAAQ,gBAAUH,MAAV,EAAkBI,QAAlB,EAA4B;AAChCV,mBAAWW,WAAX,CAAuBL,MAAvB,EAA+B,OAA/B,EAAwC,UAAUM,GAAV,EAAeC,CAAf,EAAkB;AACtD,gBAAID,GAAJ,EAAS;AACLF,yBAASE,GAAT,EAAc,IAAd;AACH,aAFD,MAGK;AACDE,4BAAYC,OAAZ,CAAoB,EAAET,QAAQA,MAAV,EAApB,EAAwC,UAAxC,EAAoD,UAAUM,GAAV,EAAeI,EAAf,EAAmB;AACnE,wBAAIC,MAAM,IAAIZ,IAAJ,EAAV;AACA,wBAAI,CAACW,EAAL,EAAS;AACDA,6BAAK,IAAIF,WAAJ,CAAgB;AACjBR,oCAAQA,MADS;AAEjBF,sCAAUa;AAFO,yBAAhB,CAAL;AAIP;;AAED,wBAAKA,OAAOD,GAAGZ,QAAX,IAAyBa,MAAMD,GAAGZ,QAAV,IAAuBL,OAAOmB,MAAP,CAAcC,QAAjE,EAA2E;AAAE;;AAEzEH,2BAAGZ,QAAH,GAAca,GAAd;AACAD,2BAAGI,IAAH;;AAEA,4BAAIC,SAASC,aAAavB,OAAOmB,MAAP,CAAcK,GAA3B,EAAgCxB,OAAOmB,MAAP,CAAcM,GAA9C,CAAb;AACA,4BAAIC,IAAIZ,EAAEa,SAAF,CAAY,KAAZ,EAAmBL,SAAS,UAA5B,CAAR;AACCR,0BAAEO,IAAF;;AAGDV,iCAAS,IAAT,EAAe,EAACiB,MAAM,CAAP,EAAUT,QAAOG,MAAjB,EAA0BO,SAASf,EAAEgB,UAAF,CAAa,KAAb,CAAnC,EAAf;AACH,qBAXD,MAYK;AACDnB,iCAAS,IAAT,EAAe,EAACiB,MAAM,CAAC,CAAR,EAAWvB,UAAUY,GAAGZ,QAAxB,EAAf,EADC,CACmD;AACvD;AACA,iBAxBL;AAyBH;AACJ,SA/BD;AAgCH;AAlCkB,CAAvB;AAoCA;AACA,SAASkB,YAAT,CAAsBQ,GAAtB,EAA2BC,IAA3B,EAAiC;AAC7B,WAAOC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiBH,OAAOD,GAAP,GAAa,CAA9B,IAAmCA,GAA9C,CAAP;AACH;;AAED,IAAIhB,cAAcb,SAASkC,KAAT,CAAe,QAAf,EAAyBjC,YAAzB,CAAlB;;AAEAkC,OAAOC,OAAP,GAAiBvB,WAAjB","file":"faucetHelper.js","sourcesContent":["ï»¿var dbhelp = require(\"./dbHelper\"),\r\n    db = dbhelp.db,\r\n    config = require(\"../../config\"),\r\n    userHelper = require('./userHelper.js'),\r\n    mongoose = dbhelp.mongoose;\r\n\r\nvar faucetSchema = new mongoose.Schema({\r\n    lastTime: Date,\r\n    userid: String\r\n});\r\n/*Static methods*/\r\nfaucetSchema.statics = {\r\n    GetPay: function (userid, callback) {\r\n        userHelper.GetUserById(userid, 'funds', function (err, u) {\r\n            if (err) {\r\n                callback(err, null);\r\n            }\r\n            else {\r\n                faucetModel.findOne({ userid: userid }, 'lastTime', function (err, fa) {\r\n                    var now = new Date();\r\n                    if (!fa) {\r\n                            fa = new faucetModel({\r\n                                userid: userid,\r\n                                lastTime: now\r\n                            });\r\n                    }\r\n\r\n                    if ((now == fa.lastTime) || (now - fa.lastTime) >= config.faucet.interval) { //send out bitcoin every 15 minutes\r\n                        \r\n                        fa.lastTime = now;\r\n                        fa.save();\r\n                        \r\n                        var amount = randomIntInc(config.faucet.min, config.faucet.max);\r\n                        var f = u.addProfit('BTC', amount * 0.00000001)\r\n                         u.save();\r\n                        \r\n                        \r\n                        callback(null, {code: 0, faucet:amount,  balance: u.getBalance('BTC') });\r\n                    } \r\n                    else { \r\n                        callback(null, {code: -2, lastTime: fa.lastTime }); //too soon\r\n                    }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n};\r\n/*functions*/\r\nfunction randomIntInc(low, high) {\r\n    return Math.floor(Math.random() * (high - low + 1) + low);\r\n}\r\n\r\nvar faucetModel = mongoose.model('Faucet', faucetSchema);\r\n\r\nmodule.exports = faucetModel;"]}
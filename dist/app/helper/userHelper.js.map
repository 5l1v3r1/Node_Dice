{"version":3,"sources":["../../../src/app/helper/userHelper.js"],"names":["db","mongoose","userSchema","Schema","guid","type","String","index","userName","unique","clientSalt","serverSalt","nonce","Number","createTime","Date","expires","funds","coinName","depositAmount","depositAddress","withdrawAddress","withdrawAmount","profit","autoIndex","mongodb","methods","getFund","i","fund","getBalance","addProfit","setDeposit","amount","setDepositAddr","addr","statics","CreateNewUser","username","callback","user","userModel","v4","save","err","console","error","GetUserById","userid","fields","findOne","SaveClientSalt","u","_clientSalt","_serverSalt","GetNewAddress","helper","address","GetBalance","f","balance","model"],"mappings":"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","file":"userHelper.js","sourcesContent":["/**\r\n * Copyright 2014 Node Dice\r\n *\r\n * Created by Neo on 2014/11/27.\r\n */\r\n\r\n'use strict';\r\nimport dbhelp from './dbHelper';\r\nimport config from '../../config';\r\nimport uuid from 'uuid';\r\nimport coinsConfig from '../../config/coinsConfig.js';\r\n\r\nconst db = dbhelp.db;\r\nconst mongoose = dbhelp.mongoose;\r\n/*view models*/\r\n/*user schema*/\r\nconst userSchema = new mongoose.Schema({\r\n    guid: { type: String, index: true },\r\n    userName: { type: String, index: { unique: true } },\r\n    clientSalt: String,\r\n    serverSalt: String,\r\n    nonce: Number,\r\n    createTime: { type: Date, expires: 60 * 60 * 24 * 30 },//in production, remove expire attr\r\n    funds: [{\r\n            coinName: String,\r\n            depositAmount: Number,\r\n            depositAddress: String,\r\n            withdrawAddress: String,\r\n            withdrawAmount: Number,\r\n            profit: Number,\r\n        }]\r\n}, { autoIndex: config.mongodb.autoIndex });\r\n//Instance methods\r\nuserSchema.methods.getFund = function (coinName){\r\n    for (let i in this.funds) {\r\n            let fund = this.funds[i];\r\n        if (fund.coinName == coinName)\r\n            return fund;\r\n    }\r\n    return null;\r\n}\r\nuserSchema.methods.getBalance = function (coinName) {\r\n    \r\n    let fund = this.getFund(coinName)\r\n    if (fund)\r\n        return fund.depositAmount - fund.withdrawAmount + fund.profit;\r\n\r\n    return 0;\r\n}\r\nuserSchema.methods.addProfit = function (coinName, profit){\r\n\r\n    let fund = this.getFund(coinName)\r\n    if (fund) {\r\n        fund.profit += profit;\r\n        return fund;\r\n    }\r\n}\r\nuserSchema.methods.setDeposit = function (coinName, amount) {\r\n    \r\n    let fund = this.getFund(coinName)\r\n    if (fund && amount) {\r\n        fund.depositAmount = amount;\r\n    }\r\n\r\n     return fund;\r\n}\r\nuserSchema.methods.setDepositAddr = function (coinName, addr) {\r\n    \r\n    let fund = this.getFund(coinName)\r\n    if (fund) {\r\n        fund.depositAddress = addr;\r\n        return fund;\r\n    }\r\n}\r\n//Static methods\r\nuserSchema.statics = {\r\n    CreateNewUser: function (username, callback) {\r\n        let user = new userModel(\r\n            {\r\n                guid : uuid.v4(),\r\n                userName: username,\r\n                serverSalt : uuid.v4(),\r\n                clientSalt : uuid.v4(),\r\n                nonce : 0,\r\n                createTime: new Date(),\r\n                funds: [{\r\n                        coinName: 'BTC', \r\n                        depositAddress: '', depositAmount: 0, \r\n                        withdrawAddress: '', withdrawAmount: 0,\r\n                        profit: 0\r\n                    },\r\n                        {\r\n                        coinName: 'NXT', \r\n                        depositAddress: '', depositAmount: 0, \r\n                        withdrawAddress: '', withdrawAmount: 0,\r\n                        profit: 0\r\n                    }]\r\n            });\r\n        \r\n        user.save(function (err) {\r\n            if (err) {\r\n                callback(err, null);\r\n                console.error('Saving user error: ' + err);\r\n            }\r\n            else {\r\n                callback(null, user);\r\n            }\r\n        });\r\n    },\r\n    GetUserById: (userid, fields, callback) => {\r\n        userModel.findOne({ guid: userid }, fields, callback);\r\n    },\r\n    SaveClientSalt : (userid, clientSalt, callback) => {\r\n        userModel.findOne({ guid: userid }, \"clientSalt serverSalt\", (err, u) => {\r\n            if (err)\r\n                callback({ error: err }, null);\r\n            else {\r\n                \r\n                let _clientSalt, _serverSalt;\r\n                _clientSalt = u.clientSalt;\r\n                _serverSalt = u.serverSalt;\r\n                \r\n                u.clientSalt = clientSalt;\r\n                u.serverSalt = uuid.v4();\r\n                u.nonce = 0;\r\n                u.save();\r\n                callback(null, { clientSalt: _clientSalt, serverSalt: _serverSalt })\r\n            }\r\n        });\r\n    },\r\n    GetNewAddress: (userid, coinName, callback) => {\r\n        let helper = coinsConfig[coinName];\r\n        helper.GetNewAddress(userid, (err, addr) => {\r\n            if (err) { \r\n                callback(err, null);\r\n            }\r\n            else {\r\n                userModel.findOne({ guid: userid }, \"funds\", function (err, u) {\r\n                    if (err) { callback(err, null); }\r\n                    else {\r\n                        u.setDepositAddr('BTC', addr);\r\n                        u.save();\r\n                        callback(err, { address: addr });\r\n                    }\r\n                });\r\n            }    \r\n        });\r\n        \r\n    },\r\n    GetBalance: function (userid, coinName, callback) {\r\n        \r\n        let helper = coinsConfig[coinName];\r\n        helper.GetBalance(userid, function (err, amount) {\r\n            userModel.findOne({ guid: userid }, \"funds\", function (err, u) {\r\n                if (err) { callback(err, null); }\r\n                else {\r\n                    let f = u.setDeposit(coinName, amount);\r\n                    u.save();\r\n                     \r\n                    callback(err, { balance: u.getBalance(coinName) });\r\n                }\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nlet userModel = mongoose.model('User', userSchema);\r\n \r\n/*exports models*/\r\nexport default userModel;\r\n"]}
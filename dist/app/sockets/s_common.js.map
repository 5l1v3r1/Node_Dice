{"version":3,"sources":["../../../src/app/sockets/s_common.js"],"names":["module","exports","io","on","socket","session","handshake","emit","getCoinNames","username","CreateNewUser","err","user","code","error","userid","guid","userName","save","date","Date","setTime","getTime","expires","toGMTString","headers","cookie","clientSalt","funds","nonce","hashedServerSalt","createHash","update","serverSalt","digest","GetUserById","u","SaveClientSalt","oldSalt","coinName","GetNewAddress","addr","GetBalance","balance"],"mappings":"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","file":"s_common.js","sourcesContent":["ï»¿/**\r\n * Copyright 2017 Node Dice\r\n *\r\n * Created by Neo on 2017/01/17.\r\n */\r\n'use strict';\r\n\r\nimport config from '../../config';\r\nimport uuid from 'node-uuid';\r\nimport userHelper from '../helper/userHelper';\r\nimport crypto from'crypto';\r\nimport coinsConfig from '../../config/coinsConfig.js';\r\n\r\nmodule.exports =  (io) => {\r\n    \r\n    //socket.io events\r\n    io.on('connection',  (socket) => {\r\n        const session = socket.handshake.session;\r\n        socket.emit('coinNames', coinsConfig.getCoinNames());\r\n\r\n        //return a new user\r\n        socket.on('newUser',  (username) => {\r\n            userHelper.CreateNewUser(username,  (err, user)=>  {\r\n                if (err) { \r\n                    if (err.code == 11000)\r\n                        socket.emit('newUser', { error: { code: 11000 } });\r\n                }\r\n                else {\r\n                    session.userid = user.guid;\r\n                    session.username = user.userName;\r\n                    session.save();\r\n                    let date = new Date();\r\n                    date.setTime(date.getTime() + (30 * 24 * 60 * 60 * 1000)); // set day value to expiry\r\n                    let expires = \"expires=\" + date.toGMTString();\r\n                    \r\n                    socket.handshake.headers.cookie = \"newUser=0;\" + expires + \"; path=/\";\r\n                    socket.emit('newUser', {\r\n                        userid: user.guid,\r\n                        userName: user.userName,\r\n                        clientSalt: user.clientSalt, \r\n                        funds: user.funds,\r\n                        nonce: 0,\r\n                        hashedServerSalt: crypto.createHash('sha512').update(user.serverSalt).digest('hex')\r\n                    });\r\n                }\r\n            });\r\n        });\r\n        \r\n        //return an existing user\r\n        socket.on('existingUser',  () => {\r\n            userHelper.GetUserById(session.userid, \"clientSalt serverSalt guid userName funds nonce\",\r\n                (err, u) => {\r\n                if (err) {\r\n                    socket.emit('existingUser', { clientSalt: '', error: err });\r\n                }\r\n                else {\r\n                    if (u) {\r\n                        socket.emit('existingUser', {\r\n                            userid: u.guid,\r\n                            userName: u.userName,\r\n                            clientSalt: u.clientSalt , \r\n                            funds: u.funds,\r\n                            nonce: u.nonce,\r\n                            hashedServerSalt: crypto.createHash('sha512').update(u.serverSalt).digest('hex')\r\n                        });\r\n                    }\r\n                    else {\r\n                        socket.emit('existingUser', { clientSalt: '', error: 'session expired' });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        //update client salt\r\n        socket.on('clientSalt', (clientSalt) => {\r\n            userHelper.SaveClientSalt(session.userid, clientSalt, (err, oldSalt) => {\r\n                if (err)\r\n                    socket.emit('savingClientSalt', err);\r\n                else\r\n                    socket.emit('savingClientSalt', oldSalt);\r\n            });\r\n        });\r\n\r\n        //get new bitcion address\r\n        socket.on('newCoinAddr', (coinName) => {\r\n            userHelper.GetNewAddress(session.userid, coinName, (err, addr) => {\r\n                if (err)\r\n                    socket.emit('newCoinAddr', err);\r\n                else\r\n                    socket.emit('newCoinAddr', addr);\r\n            });\r\n        });\r\n\r\n        //get user balance\r\n        socket.on('getBalance', (coinName) => {\r\n            userHelper.GetBalance(session.userid, coinName, (err, balance) => {\r\n                if (err)\r\n                    socket.emit('getBalance', err);\r\n                else\r\n                    socket.emit('getBalance', balance);\r\n            });\r\n        });\r\n        \r\n    });\r\n\r\n    //functions\r\n    function CreateNewUser() { }\r\n}\r\n"]}